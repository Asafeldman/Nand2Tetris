// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
        static Array powers_of_two;

        /** Initializes the library. */
        function void init() {
            
            let powers_of_two = Array.new(16);
            let powers_of_two[0] = 1;
            let powers_of_two[1] = 2;
            let powers_of_two[2] = 4;
            let powers_of_two[3] = 8;
            let powers_of_two[4] = 16;
            let powers_of_two[5] = 32;
            let powers_of_two[6] = 64;
            let powers_of_two[7] = 128;
            let powers_of_two[8] = 256;
            let powers_of_two[9] = 512;
            let powers_of_two[10] = 1024;
            let powers_of_two[11] = 2048;
            let powers_of_two[12] = 4096;
            let powers_of_two[13] = 8192;
            let powers_of_two[14] = 16384;
            let powers_of_two[15] = 16384 + 16384; /** 32768 is too large for Jack, which supports integers up to 32767 */
            return;
        }

        /** Returns the i'th bit of x. */
        function boolean bit(int x, int i) {
            return ~((x & powers_of_two[i]) = 0);
        }

        /** Returns the absolute value of x. */
        function int abs(int x) {
            if (x < 0) { return -x; }
            else { return x; }
        }

        /** 
         * Returns the product of x and y. 
         * When a Jack compiler detects the multiplication operator '*' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x*y and multiply(x,y) return the same value.
         */
        function int multiply(int x, int y) {
            // Pseudocode:
            // 1. let sum = 0
            // 2. let shiftedx = x
            // 3. for i = 0 ... n-1 do
            // 4.   if ((i-th bit of y) == 1)
            // 5.      let sum = sum + shiftedx
            // 6.   let shiftedx = 2*shiftedx
            // 7. return sum
            var int sum, shiftedx, i;

            let sum = 0;
            let shiftedx = x;
            let i = 0;

            while (i < 16) {
                if (Math.bit(y, i) = true) {
                    let sum = sum + shiftedx;
                }
                let shiftedx = shiftedx + shiftedx;
                let i = i+1;  
            }
            return sum;
        }

        /** 
         * Returns the integer part of x/y.
         * When a Jack compiler detects the multiplication operator '/' in the 
         * program's code, it handles it by invoking this method. In other words,
         * the Jack expressions x/y and divide(x,y) return the same value.
         */
        function int divide(int x, int y) {
            // Pseudocode:
            // 1. if (y > x) return 0
            // 2. let q = divide(x, 2*y)
            // 3. if ((x - 2*q*y) < y)
            // 4.   return 2*q
            // 5. else
            // 6.   return 2*q + 1
            var int q, x_sgn, y_sgn;

            let x_sgn = x < 0; /** save the signs in order to deal with negative division */
            let y_sgn = y < 0;
            let x = Math.abs(x);
            let y = Math.abs(y);
        
            if (y > x) { return 0; }

            let q = Math.divide(x, y+y);
            if (x - (Math.multiply(q+q, y)) < y) {
                if (x_sgn = y_sgn) { return q+q; }
                else { return -(q+q); }
            }

            else {
                if (x_sgn = y_sgn) { return (q+q)+1; }
                else { return -(q+q+1); }
            }
        }
        
        /** Returns the integer part of the square root of x. */
        function int sqrt(int x) {
            // Pseudocode (where '**' is the mathematical power function):
            // 1. let y = 0
            // 2. for j = (n/2 - 1) ... 0 do
            // 3.   if ((y + 2**j)**2 <= x) then let y = y + 2**j
            // 4. return y
            var int y, j, y_2j, y_2j_squared;

            let y = 0;
            let j = 7; /** 16/2 - 1 = 7 */

            while (j > -1) {

                let y_2j = y + powers_of_two[j];
                let y_2j_squared = Math.multiply(y_2j, y_2j);
                if ((~(y_2j_squared > x)) & (y_2j_squared > 0)) {
                    let y = y_2j;
                }
                let j = j-1;
            }
            return y; 
        }

        /** Returns the greater number. */
        function int max(int a, int b) {
            if (a < b)  { return b; }
            else {return a;}
        }

        /** Returns the smaller number. */
        function int min(int a, int b) {
            if (a < b) { return a; }
            else { return b; }
        }
    }