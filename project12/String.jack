// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */

    field Array str;
    field int length;
    field int max;

    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let str = Array.new(maxLength);
        let length = 0;
        let max = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Array.dispose(str);
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        let str[length] = c;
        let length = length + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        let length = length - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        // Pseudocode:
        // 1. let val = 0
        // 2. for (i = 0 .. str.length()) do
        // 3.   let d = integer value of str.charAt(i)
        // 4.   let val = (val*10) + d
        // 5. return val
        var int val, i, d;
        var bool is_negative;
        var bool stop;
        
        let stop = false; /** check if we had already reached a non-digit character. */
        let val = 0;
        if ((str[0] = 45) & (length > 0)) { /** check if the first char is '-' to determine if the integer value is negative. */
            let is_negative = true;         /** if it is '-', set i to 1 and the is_negative flag to true. */
            let i = 1;
        }
        else {
            let is_negative = false;
            let i = 0;
        }
        while (i < length) {
            if (((str[i] > 47) & (str[i] < 58)) & (stop = false)) {
                let d = str[i] - 48;
                let val = (val*10) + d;
            }
            let i = i + 1;
            if ((stop = false) & ((~(str[i] > 47)) | (~(str[i] < 58)))) {
                let stop = true;
            }
        }
        if (is_negative) { return -(val); }
        else { return val; }
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        // Pseudocode:
        // 1. let lastDigit = val % 10
        // 2. let c = character representing lastDigit
        // 3. if (val < 10)
        // 4.   return c (as a string)
        // 5. else
        // 6.   return int2String(val / 10).appendChar(c)
        let length = 0;

        if (val < 0) { /** if val is negative, set '-' as the first character of the string and continue working with the absolute value of val */
            let val = -val;
            do appendChar(45);
        }
        do int2String(val);
        return;
    }

    /** Implementation of the recursive int2String function as a helper function to setInt. */
    method void int2String(int val) {

        var int lastdigit, c, val_div_10;

        let val_div_10 = val/10;
        let lastdigit = val - (val_div_10 * 10);
        let c = lastdigit + 48;

        if (val < 10) {
            do appendChar(c);
        }

        else {
            do int2String(val_div_10);
            do appendChar(c);
        }
        return; 
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
