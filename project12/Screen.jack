// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
        /** Initializes the Screen. */
        static Array screen, powers_of_two;
        static boolean black, white, curColor;

        function void init() {
            let screen = 16384;
            let black = true;
            let white = false;
            let curColor = black;

            let powers_of_two = Array.new(16);
            let powers_of_two[0] = 1;
            let powers_of_two[1] = 2;
            let powers_of_two[2] = 4;
            let powers_of_two[3] = 8;
            let powers_of_two[4] = 16;
            let powers_of_two[5] = 32;
            let powers_of_two[6] = 64;
            let powers_of_two[7] = 128;
            let powers_of_two[8] = 256;
            let powers_of_two[9] = 512;
            let powers_of_two[10] = 1024;
            let powers_of_two[11] = 2048;
            let powers_of_two[12] = 4096;
            let powers_of_two[13] = 8192;
            let powers_of_two[14] = 16384;
            let powers_of_two[15] = 16384 + 16384; /** 32768 is too large for Jack, which supports integers up to 32767 */
            return;
        }

        /** Erases the entire screen. */
        function void clearScreen() {
            var int i;

            while (i < 24576-16384) {
                let screen[i] = white;
            }
            return;
        }

        /** Sets the current color, to be used for all subsequent drawXXX commands.
         *    Black is represented by true, white by false. */
        function void setColor(boolean b) {
            let curColor = b;
            return;
        }

        /** Draws the (x,y) pixel, using the current color. */
        function void drawPixel(int x, int y) {
            // For this function, you will need to calculate the value x%16.
            // It should be calculated quickly without using multiplication or
            // division, using exactly one basic math/logical operation.
            // In addition, calculating 16384 + y * 32 + x/16 should not use
            // division or multiplication.
            // Pseudocode:
            // 1. Compute the RAM address where the (x,y) pixel is
            //    represented: 16384 + (32*y) + (x/16).
            // 2. Use Memory.peek to get the 16-bit value of this address
            // 3. Use some bitwise operation to set (only) the bit that corresponds
            //    to the pixel to the current color.
            // 4. Use Memory.poke to write the modified 16-bit value to the RAM
            // address.
            var int address, value, bit;
            
            let address = (32*y) + (x/16);
            let bit = powers_of_two[x & 15]; 

            if (curColor = black) {
                let screen[address] = screen[address] | bit; // if the bit was white: (false or true) = true = black
            }                                                // if the bit was black: (true or true) = true = black
            else {
                let screen[address] = screen[address] & (~bit); // if the bit was white: (false and true) = false = white
            }                                                   // if the bit was black: (true and false) = false = white
            return;
        }

        /** Draws a horizontal line from pixel (x1,y1) to pixel (x2,y1), using the current color. */
        function void drawHorizontal(int x1, int y1, int x2) {
            if (x2 > x1) {
                while (~(x1 > x2)) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 + 1;
                }
            }
            else {
                while (~(x1 < x2)) {
                    do Screen.drawPixel(x1, y1);
                    let x1 = x1 - 1;
            }
        }
        return;
    }

        /** Draws a vertical line from pixel (x1,y1) to pixel (x1,y2), using the current color. */
        function void drawVertical(int x1, int y1, int y2) {
            if (y2 > y1) {
                while (~(y1 > y2)) {
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 + 1;
                }
            }
            else {
                while (~(y1 < y2)) {
                    do Screen.drawPixel(x1, y1);
                    let y1 = y1 - 1;
                }
            }
            return;
        }

        /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
        function void drawLine(int x1, int y1, int x2, int y2) {
            // The case where x1 != x2 and y1 != y2 should be implemented without
            // multiplication or division.
            // Pseudocode:
            // 1. let x = x1, y = y1, a = 0, b = 0, diff = 0
            // 2. Compute dx and dy
            // 3. while ((a <= dx) and (b <= dy))
            // 4.   do drawPixel(x+a, y+b)
            // 5.   if (diff < 0) { let a=a+1, diff=diff+dy }
            // 6.   else          { let b=b+1, diff=diff-dx }
            //
            // The case where y1 == y2 can be implemented efficiently by
            // trying to draw as many pixels as possible in a single assignment,
            // similarly to Fill in project 4.
            var int dx, dy, a, b, diff, gt;

            if (~(x1 < x2)) {
                let gt = y1;
                let y1 = y2;
                let y2 = gt;
                let gt = x1;
                let x1 = x2;
                let x2 = gt;   
            }

            let dx = x2 - x1;
            let dy = y2 - y1;
            let a = 0;
            let b = 0;
            let diff = 0;

            if (dx = 0) {
                do Screen.drawVertical(x1, y1, y2);
                return;
            }

            if (dy = 0) {
                do Screen.drawHorizontal(x1, y1, x2);
                return;
            }
            
            while ((~(a > dx)) & (~(b > dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }

            while ((~(a > dx)) & (~(b < dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff > 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                }
                else {
                    let b = b - 1;
                    let diff = diff + dx;
                }
            }
            return;
        }

        /** Draws a filled rectangle whose top left corner is (x1, y1)
         * and bottom right corner is (x2,y2), using the current color. */
        function void drawRectangle(int x1, int y1, int x2, int y2) {
            while (~(y1 > y2)) {
                do Screen.drawLine(x1, y1, x2, y1);
                let y1 = y1 + 1;
            }
            return;
        }

        /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
        function void drawCircle(int x, int y, int r) {
            // This can be implemented efficiently by drawing multiple lines at
            // each iteration. You can use multiplication and sqrt.
            // Pseudocode:
            // 1. for (dy = -r ... r)
            // 2.   let halfWidth = sqrt(r*r - dy*dy)
            // 3.   do drawLine(x-halfWidth, y+dy, x+halfWidth, y+dy)
            var int dy, halfWidth;
            
            let dy = -r;
            while (~(dy > r)) {
                let halfWidth = Math.sqrt((r*r) - (dy*dy));
                do Screen.drawHorizontal(x-halfWidth, y+dy, x+halfWidth);
                let dy = dy + 1;
            }
            return;
        }
}