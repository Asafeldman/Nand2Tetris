// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    // ZX + ZY
    // Manipulating x according to zx's API using Mux16
    // x1 is x's value after the zx manipulation
    Mux16(a=x, b=false, sel=zx, out=x1);
    // Setting Not(x1) for use with the nx manipulation
    Not16(in=x1, out=notx1);
    // Finalizing x by manipulating it according to nx's API using Mux16
    Mux16(a=x1, b=notx1, sel=nx, out=finalx);

    // ZY + NY
    // Manipulating y according to zy's API using Mux16
    // y1 is y's value after the zy manipulation
    Mux16(a=y, b=false, sel=zy, out=y1);
    // Setting Not(y1) for use with the ny manipulation
    Not16(in=y1, out=noty1);
    // Finalizing y by manipulating it according to ny's API using Mux16
    Mux16(a=y1, b=noty1, sel=ny, out=finaly);

    // F
    // Calculating x + y = outadd
    Add16(a=finalx, b=finaly, out=outadd);
    // Calculating x & y = outand
    And16(a=finalx, b=finaly, out=outand);
    // Pre-setting out's value according to f's API using Mux16
    // out1 is out's value after f's manipulation
    Mux16(a=outand, b=outadd, sel=f, out=out1);

    // NO
    // Calculating !out1 = notout1
    Not16(in=out1, out=notout1);
    // Finalizing out according to not's API using Mux16
    // out2 and out are the same, but out2 will be used to evaluate zr
    // out15 will be used to calculate ng
    Mux16(a=out1, b=notout1, sel=no, out=out, out=out2, out[15]=leftmost);

    // ZR
    // Initialize a selector for the output by putting it through an Or16Way gate
    Or16Way(in=out2, out=outsel);
    Mux(a=true, b=false, sel=outsel, out=zr);

    // NG
    // The selector here is out[15] which is the leftmost bit, as it is the sign bit
    And(a=leftmost, b=leftmost, out=ng);
}
