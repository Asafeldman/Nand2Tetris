// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Set A instruction control bit
    Not(in=instruction[15],out=ainstruction);

    // A and D registers
    // ARegister
    Mux(a=true,b=instruction[5],sel=instruction[15],out=aload);
    Mux16(a=instruction,b=outalu,sel=instruction[15],out=ina);
    ARegister(in=ina,load=aload,out=outa,out[0..14]=addressM);
    // DRegister
    And(a=instruction[15],b=instruction[4],out=dload);
    DRegister(in=outalu,load=dload,out=outd);

    // Extended ALU
    And(a=instruction[14],b=instruction[13],out=regcpu);
    Or(a=regcpu,b=ainstruction,out=in8);
    Mux(a=true,b=instruction[13],sel=instruction[15],out=in7);
    Mux16(a=outa,b=inM,sel=instruction[12],out=aluy);
    ExtendAlu(x=outd, y=aluy, instruction[0..5]=instruction[6..11], instruction[6]=false, instruction[7]=in7, instruction[8]=in8, out=outalu, out=outM, zr=zr, ng=ng);
            
    // Configuring jump bits
    And(a=instruction[0],b=instruction[15],out=j3);
    And(a=instruction[1],b=instruction[15],out=j2);
    And(a=instruction[2],b=instruction[15],out=j1);
    
    // Jump bit handling and PC
    And(a=j1,b=ng,out=jlt);
    And(a=j2,b=zr,out=jeq);
    And(a=nzng,b=j3,out=jgt);
    Not(in=zng,out=nzng);
    Or(a=zr,b=ng,out=zng);
    Or(a=jlt,b=jeq,out=njeq);
    Or(a=njeq,b=jgt,out=jumpsel);
    PC(in=outa,load=jumpsel,inc=true,reset=reset,out[0..14]=pc);

    // writeM
    And(a=instruction[15],b=instruction[3],out=writeM);
}